stages:
  - dependencies
  - build
  - deploy

variables:
  APP_NAME_PREFIX: powermate
  APP_NAME_SUFFIX: api_lambda

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      variables:
        ENV: prod
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
      variables:
        ENV: dev

image: golang:1.20-alpine

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    key: GO_DOWNLOAD_CACHE-$CI_COMMIT_SHA
    paths:
      - .go/pkg/mod/

dependencies:
  stage: dependencies
  extends: .go-cache
  script:
    - pwd
    - ls -al
    - go mod download
  artifacts:
    expire_in: 1h
    paths:
      - .go/

build:
  stage: build
  variables:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0
    TO_BUILD: "data passthrough provisioning devices ingress"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - changes:
        paths:
          - lambda/*
      when: always
  before_script:
    - apk update
    - apk add zip
    - apk add --no-cache --upgrade bash
    - chmod +x ./build.sh
  script:
    - echo "Building $TO_BUILD..."
    - ./build.sh "$TO_BUILD"
  artifacts:
    expire_in: 1h
    paths:
      - function-*.zip

.deploy-lambda: &deploy-lambda
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  stage: deploy
  needs:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        paths:
          - lambda/$APP_NAME/*
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  script:
    - aws lambda update-function-code --function-name "${APP_NAME_PREFIX}_${ENV}_${APP_NAME}_${APP_NAME_SUFFIX}" --zip-file fileb://function-$APP_NAME.zip

deploy-data:
  <<: *deploy-lambda
  variables:
    APP_NAME: data

deploy-passthrough:
  <<: *deploy-lambda
  variables:
    APP_NAME: passthrough

deploy-provisioning:
  <<: *deploy-lambda
  variables:
    APP_NAME: provisioning

deploy-devices:
  <<: *deploy-lambda
  variables:
    APP_NAME: devices

deploy-ingress:
  <<: *deploy-lambda
  variables:
    APP_NAME: ingress
